## MulleInvocationQueue

You create a queue on **your** current thread

``` objc
   queue = [MulleInvocationQueue alloc];
   queue = [queue initWithCapacity:128
                     configuration:MulleInvocationQueueMessageDelegateOnExecutionThread];
   queue = [queue autorelease];
```

Then you feed the invocation queue with invocations still from **your** thread.
These invocations need not be to methods, written in a threadsafe manner, as
long as the target is now exclusively used by the **MulleInvocationQueue** until
all invocations are processed:


``` objc
      invocation = [NSInvocation mulleInvocationWithTarget:foo
         selector:@selector( printUTF8String:), s];

      [queue addInvocation:invocation];
```

It is not necessary, but it will likely be helpful to mark the last invocation
as the "final" invocation. This could be a `-close` on a `NSFilehandle` for
example:

``` objc
   invocation = [NSInvocation mulleInvocationWithTarget:foo
      selector:@selector( printUTF8String:), s];

   [queue addFinalInvocation:invocation];
```

With `[queue start]` the queue is now executing in parallel with the calling
thread.

